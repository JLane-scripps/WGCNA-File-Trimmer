import streamlit as st
import pandas as pd
import os

# Variable to store the selected input file
selected_input_file = ""
default_output_filename = ""

# Function to remove blanks
def remove_blanks(input_directory, input_filename, output_filename):
    try:
        # Construct the full input and output file paths
        input_excel_file = os.path.join(input_directory, input_filename)
        output_excel_file = os.path.join(input_directory, f"{output_filename}.xlsx")

        # Load the Excel file into a DataFrame
        df = pd.read_excel(input_excel_file, engine='openpyxl')

        # If needing to remove extra unnecessary columns or only keep specific ones, write that function here

        # Iterate through the DataFrame to check for blank values and remove rows with blanks
        df = df.dropna()

        # Save the filtered DataFrame as an Excel file
        df.to_excel(output_excel_file, index=False, engine='openpyxl')

        st.success(f"Filtered data saved to {output_excel_file}")
    except FileNotFoundError:
        st.error("File not found. Please check the file path.")
    except Exception as e:
        st.error(f"An error occurred: {str(e)}")

# Function to remove insignificance
def find_significance(input_directory, input_filename, output_filename):
    try:
        # Construct the full input and output file paths
        input_excel_file = os.path.join(input_directory, input_filename)
        output_excel_file = os.path.join(input_directory, f"{output_filename}.xlsx")

        # Read all sheets from the Excel file
        xls = pd.ExcelFile(input_excel_file)

        # Create an empty DataFrame to store the combined data
        combined_df = pd.DataFrame()

        for sheet_name in xls.sheet_names:
            # Load the sheet into a DataFrame
            df = pd.read_excel(xls, sheet_name, engine='openpyxl')

            # Find the "significant" column (technically unnecessary, can be deleted)
            sig_column = list(df.columns)[1]

            # Filter (keep) rows where the "significant" column contains the BOOLEAN true (NOT A STRING)
            df = df[df[sig_column] == True]

            # For debugging, and to view the number of columns marked true per sheet in the console.
            st.write(df)

            # Add a new column for the sheet name
            df['sheet_name'] = sheet_name

            # Append the filtered DataFrame to the combined DataFrame. All sheets are combined into one
            combined_df = pd.concat([combined_df, df], ignore_index=True)

        # Identify and remove all occurrences of duplicate values (INCLUDING ORIGINAL) in the "term_id" column
        combined_df = combined_df[~combined_df['term_id'].duplicated(keep=False)]

        # Save the filtered DataFrame as an Excel file
        combined_df.to_excel(output_excel_file, index=False, engine='openpyxl')

        st.success(f"Filtered data saved to {output_excel_file}")
    except FileNotFoundError:
        st.error("File not found. Please check the file path.")
    except Exception as e:
        st.error(f"An error occurred: {str(e)}")

# Streamlit App
def main():
    st.title("WGCNA File Trimmer")

    # Sidebar
    st.sidebar.header("Select Operation")
    operation = st.sidebar.radio("", ["Remove Blanks", "Remove Insignificance"])

    # File selection
    st.sidebar.header("File Selection")

    input_directory = st.sidebar.text_input("Enter Directory:")
    input_filename = st.sidebar.text_input("Input Filename:")
    output_filename = st.sidebar.text_input("Output Filename:")

    if st.sidebar.button("Process"):
        if operation == "Remove Blanks":
            remove_blanks(input_directory, input_filename, output_filename)
        elif operation == "Remove Insignificance":
            find_significance(input_directory, input_filename, output_filename)

if __name__ == "__main__":
    main()
